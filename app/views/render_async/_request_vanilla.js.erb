(function() {
  <% if turbolinks %>
  if (document.documentElement.hasAttribute("data-turbolinks-preview")) {
    return;
  }
  <% end %>
  function createEvent(name, container) {
    var event = undefined;
    if (typeof(Event) === 'function') {
      event = new Event(name);
    } else {
      event = document.createEvent('Event');
      event.initEvent(name, true, true);
    }
    event.container = container
    return event;
  }

  function _runAfterDocumentLoaded(callback) {
    <% if turbolinks %>
    document.addEventListener("turbolinks:load", function(e) {
      e.target.removeEventListener(e.type, arguments.callee);
      callback();
    });
    <% else %>
    document.addEventListener("DOMContentLoaded", callback);
    <% end %>
  }

  function _makeRequest(currentRetryCount) {
    var request = new XMLHttpRequest();
    var asyncRequest = true;
    var SUCCESS = 200;
    var ERROR = 400;

    request.open('<%= method %>', '<%= path.html_safe %>', asyncRequest);

    var headers = <%= headers.to_json.html_safe %>;
    var csrfTokenElement = document.querySelector('meta[name="csrf-token"]')
    if (csrfTokenElement)
      headers['X-CSRF-Token'] = csrfTokenElement.content

    Object.keys(headers).map(function(key) {
      request.setRequestHeader(key, headers[key]);
    });

    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        if (request.status >= SUCCESS && request.status < ERROR) {
          var container = document.getElementById('<%= container_id %>');
          <% if interval %>
          container.innerHTML = request.response;
          <% else %>
          container.outerHTML = request.response;
          <% end %>

          var loadEvent = createEvent('render_async_load', container);
          document.dispatchEvent(loadEvent);

          <% if event_name.present? %>
            var event = createEvent('<%= event_name %>', container);
            document.dispatchEvent(event);
          <% end %>
        } else {
          var skipErrorMessage = false;
          <% if retry_count > 0 %>
          skipErrorMessage = retry(currentRetryCount)
          <% end %>

          if (skipErrorMessage) return;

          var container = document.getElementById('<%= container_id %>');
          container.outerHTML = '<%= error_message.try(:html_safe) %>';

          var errorEvent = createEvent('render_async_error', container);
          document.dispatchEvent(errorEvent);

          <% if error_event_name.present? %>
            var event = createEvent('<%= error_event_name %>', container);
            document.dispatchEvent(event);
          <% end %>
        }
      }
    };

    var body = "<%= escape_javascript(data.to_s.html_safe) %>";
    request.send(body);
  };

  <% if retry_count > 0 %>
  function retry(currentRetryCount) {
    if (typeof(currentRetryCount) === 'number') {
      if (currentRetryCount >= <%= retry_count %>)
        return false;

      _makeRequest(currentRetryCount + 1);
      return true;
    }

    _makeRequest(1);
    return true;
  }
  <% end %>

  var _renderAsyncFunction = _makeRequest;

  var _interval;
  <% if interval %>
    var _renderAsyncFunction = function() {
      _makeRequest();
      _interval = setInterval(_makeRequest, <%= interval %>);
    }

    // Register a polling stop event on the container
    var container = document.getElementById('<%= container_id %>');
    container.addEventListener("async-stop", function(event){
      if (typeof(_interval) === 'number'){
        clearInterval(_interval)
        _interval = undefined;
      }
    });
    // Register a start polling event on the container
    container.addEventListener("async-start", function(event){
      _renderAsyncFunction();
    });

    <% if turbolinks %>
    document.addEventListener("turbolinks:visit", function(e) {
      if (typeof(_interval) === 'number') {
        clearInterval(_interval);
        _interval = undefined;
      }
    });
    <% end %>
  <% end %>

  <% if toggle %>
  function _setUpToggle() {
    var selectors = document.querySelectorAll('<%= toggle[:selector] %>');
    var handler = function(event) {
      if (typeof(_interval) === 'number') {
        clearInterval(_interval);
        _interval = undefined;
      } else {
        _renderAsyncFunction();
      }
      <% if toggle[:once] %>
      this.removeEventListener(event.type, handler);
      <% end %>
    };

    for (var i = 0; i < selectors.length; ++i) {
      selectors[i].addEventListener('<%= toggle[:event] || 'click' %>', handler)
    }
  }

  // DVB _runAfterDocumentLoaded(_setUpToggle);
  _setUpToggle();
  <% elsif !toggle %>
  _runAfterDocumentLoaded(_renderAsyncFunction);
  <% end %>
})();
